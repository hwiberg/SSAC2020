library(SnowballC)
# Baseline?
999/(999+182)
corpus = Corpus(VectorSource(Tweets$Tweet))
# Take a look
strwrap(corpus[[1]])
corpus = tm_map(corpus, tolower)
# Take a look
strwrap(corpus[[1]])
# IMPORTANT STEP BEFORE CONTINUING
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
# Take a look:
strwrap(corpus[[1]])
# Take a look at tm's stopwords:
stopwords("english")[1:10]
corpus = tm_map(corpus, removeWords, c("apple", stopwords("english")))
# Take a look
strwrap(corpus[[1]])
corpus = tm_map(corpus, stemDocument)
strwrap(corpus[[1]])
# Step 6: Create a word count matrix (rows are tweets, columns are words)
corpus <- tm_map(corpus, content_transformer(tolower))
frequencies = DocumentTermMatrix(corpus)
# Take a look
frequencies
inspect(frequencies[1:15,1775:1800])
# Words that appear at least 50 times:
findFreqTerms(frequencies, lowfreq=50)
# Words that appear at least 20 times:
findFreqTerms(frequencies, lowfreq=20)
# 1% or more (12 or more)
sparse = removeSparseTerms(frequencies, 0.99)
# 0.5% or more (6 or more)
sparse = removeSparseTerms(frequencies, 0.995)
sparse
# Step 8: Create data frame
TweetsTM = as.data.frame(as.matrix(sparse))
head(TweetsTM)
# We have some variable names that start with a number, so let's fix this
colnames(TweetsTM) = make.names(colnames(TweetsTM))
# Add our dependent variable:
TweetsTM$Negative = Tweets$Negative
# Split data into training and testing sets
library(caTools)
set.seed(123)
spl = sample.split(TweetsTM$Negative, SplitRatio = 0.7)
TweetsTrain = subset(TweetsTM, spl==TRUE)
TweetsTest = subset(TweetsTM, spl==FALSE)
library(rpart)
library(rpart.plot)
TweetsCART = rpart(Negative ~ ., data=TweetsTrain, method="class")
prp(TweetsCART)
# Predictions on test set
PredictCART = predict(TweetsCART, newdata=TweetsTest, type="class")
table(TweetsTest$Negative, PredictCART)
# Accuracy?
# Remember baseline is 0.845
(294+18)/(sum(table(TweetsTest$Negative, PredictCART)))
setwd("~/git/JHU-MSK-code/Preprocess/Merged")
library(dplyr)
library(gdata)
library(lubridate)
library(tidyr)
#read data
data <- read.xls("Master Db Tony (1).xlsx", sheet = 1, header = TRUE)
#select the columns
data <- data %>%
select(Age.at.the.time.of.Hx, Gender, Primary.CRC.T.stage, Primary.CRC.lymph.node.status., Primary.tumor.site,
Right.vs.Left.side.of.primary.CRC, Primary.grade, pre.hepatic.resection.chemotherapy, bevacizumab, anti.EGFR, pre.hepatectomy.CEA.value..ng.ml.,
Extrahepatic.diseas..additional.metastatic.lesions.known.at.the.time.of.hepatectomy.and.resected.at.the.same.time.or.within.the.next.6.months.,
Site.of.Extrahepatic.Disease, intraoperative.concurrent.ablation, DFI, maximum.tumor.size.of.the.largest.liver.tumor..if.multiple...cm., number.of.liver.tumors,
bilobar.disease, R0.resection, margin.width..mm...please.specify.for.both.R0.and.R1.given.the.variable.definitions.of.R1.in.the.literature,
KRAS.mutation, BRAF.mutation, Adjuvant.chemotherapy.within.3.months.of.the.liver.resection,
postop.complication, Dindo.Clavien.grade.of.most.severe.complication,General.status, OS)
new_names <- c("age.at.the.time.of.hx", "gender", "primary.CRC.T.stage", "primary.CRC.lymph.node.status",
"primary.tumor.site", "right.vs.left.side.of.primary.CRC", "primary.grade", "pre.hepatic.resection.chemotherapy",
"bevacizumab", "anti.EGFR", "pre.hepatectomy.CEA.value.ng.ml", "extrahepatic.disease",
"site.of.extrahepatic","intraoperative.concurrent.ablation",
"DFI", "maximum.tumor.size.of.the.largest.liver.tumor.if.multiple.cm",
"number.of.liver.tumors", "bilobar.disease","R0.resection", "margin.width.mm.specify.for.both.R0.and.R1",
"KRAS.mutation", "BRAF.mutation", "adjuvant.chemotherapy.within.3.months.of.the.liver.resection",
"postop.complication", "dindo.clavien.grade.of.most.severe.complication", "general.status", "os")
rbind(new_names, colnames(data))
colnames(data) <- new_names
data_cleaned <- data %>%
select(age.at.the.time.of.hx, gender, primary.CRC.T.stage, primary.CRC.lymph.node.status, primary.tumor.site,
right.vs.left.side.of.primary.CRC, primary.grade, pre.hepatic.resection.chemotherapy, bevacizumab, anti.EGFR,
pre.hepatectomy.CEA.value.ng.ml, extrahepatic.disease,site.of.extrahepatic,  intraoperative.concurrent.ablation, DFI,
maximum.tumor.size.of.the.largest.liver.tumor.if.multiple.cm, number.of.liver.tumors, bilobar.disease, R0.resection,
margin.width.mm.specify.for.both.R0.and.R1, KRAS.mutation,
BRAF.mutation, adjuvant.chemotherapy.within.3.months.of.the.liver.resection, postop.complication,
dindo.clavien.grade.of.most.severe.complication, general.status, os)
new_names
#margin.width.mm.specify.for.both.R0.and.R1 (column AD)
table(data$margin.width.mm.specify.for.both.R0.and.R1)
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 = as.character(data_cleaned$margin.width.mm.specify.for.both.R0.and.R1)
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1[data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 == "0,5"] <- "0.5"
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1[data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 == "< 1"] <- "0.9"
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1[data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 == "< 3"] <- "2.5"
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1[data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 == "<0.1"] <- "0.05"
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1[data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 == "<1"] <- "0.5"
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1[data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 == "<5"] <- "4.5"
table(data_cleaned$margin.width.mm.specify.for.both.R0.and.R1)
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1[data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 == "x"] <- ""
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 = as.numeric(gsub("[\\<,]", "", data_cleaned$margin.width.mm.specify.for.both.R0.and.R1))
table(data_cleaned$margin.width.mm.specify.for.both.R0.and.R1)
#synchronous.liver.mets (column X)
#0: synchronous, 1: metachronous
table(data$DFI)
data_cleaned$DFI[data_cleaned$DFI == "lost in follow up"] <- ""
data_cleaned$DFI[data_cleaned$DFI == "N/A"] <- ""
data_cleaned$DFI[data_cleaned$DFI == "Unknown"] <- ""
data_cleaned$DFI[data_cleaned$DFI == "liver first"] <- "11"
data_cleaned$DFI[data_cleaned$DFI == ""] <- NA
table(data_cleaned$DFI)
options(digits=10)
data_cleaned$DFI= as.numeric(data_cleaned$DFI)
data_cleaned$DFI
data$DFI
rbind(data$DFI, data_cleaned$DFI)
cbind(data$DFI, data_cleaned$DFI)
data$DFI
data$DFI[2:10]
data$DFI[1:10]
data_cleanred$DFI[1:10]
data_cleaned$DFI[1:10]
length(data$DFI)
length(data_cleaned$DFI)
data$age.at.the.time.of.hx[1:10]
data_cleaned$age.at.the.time.of.hx
data_cleaned$age.at.the.time.of.hx[1:10]
data$age.at.the.time.of.hx[1:10]
as.numeric(4.0)
data_cleaned <- data %>%
select(age.at.the.time.of.hx, gender, primary.CRC.T.stage, primary.CRC.lymph.node.status, primary.tumor.site,
right.vs.left.side.of.primary.CRC, primary.grade, pre.hepatic.resection.chemotherapy, bevacizumab, anti.EGFR,
pre.hepatectomy.CEA.value.ng.ml, extrahepatic.disease,site.of.extrahepatic,  intraoperative.concurrent.ablation, DFI,
maximum.tumor.size.of.the.largest.liver.tumor.if.multiple.cm, number.of.liver.tumors, bilobar.disease, R0.resection,
margin.width.mm.specify.for.both.R0.and.R1, KRAS.mutation,
BRAF.mutation, adjuvant.chemotherapy.within.3.months.of.the.liver.resection, postop.complication,
dindo.clavien.grade.of.most.severe.complication, general.status, os)
cbind(data$DFI, data_cleaned$DFI)
#synchronous.liver.mets (column X)
#0: synchronous, 1: metachronous
table(data$DFI)
data_cleaned$DFI[data_cleaned$DFI == "lost in follow up"] <- ""
data_cleaned$DFI[data_cleaned$DFI == "N/A"] <- ""
data_cleaned$DFI[data_cleaned$DFI == "Unknown"] <- ""
data_cleaned$DFI[data_cleaned$DFI == "liver first"] <- "11"
data_cleaned$DFI[data_cleaned$DFI == ""] <- NA
table(data_cleaned$DFI)
options(digits=10)
data_cleaned$DFI_numeric = as.numeric(data_cleaned$DFI)
data_cleaned %>% select(DFI, DFI_numeric) %>% head()
as.numemric("84")
as.numeric("84")
as.numeric('84.0')
as.numeric(data$DFI[1])
data$DFI[1]
table(data_cleaned$margin.width.mm.specify.for.both.R0.and.R1)
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1[data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 == "x"] <- ""
data_cleaned$margin.width.mm.specify.for.both.R0.and.R1 = as.numeric(gsub("[\\<,]", "", data_cleaned$margin.width.mm.specify.for.both.R0.and.R1))
table(data_cleaned$margin.width.mm.specify.for.both.R0.and.R1)
data$primary.tumor.site
new_names
setwd("~/git/SSAC2020/raw_data/")
df = read.csv("Stats_2018_2019.csv")
df_intl = read.csv("Players_NonUS.csv")
df
intl_players <- unique(df_intl$Player)
df = read.csv("Stats_2018_2019.csv", stringsAsFactors = FALSE)
df_intl = read.csv("Players_NonUS.csv", stringsAsFactors = FALSE)
intl_players <- unique(df_intl$Player)
df_clean <- df %>%
filter(!(Player %in% intl_players))
df_clean <- df %>%
filter(!(Player %in% intl_players))
unique(df_clean$Player)
df_allstar = read.csv("AllStar_2018.csv", stringsAsFactors = FALSE)
df = read.csv("Stats_2018_2019.csv", stringsAsFactors = FALSE)
df_intl = read.csv("Players_NonUS.csv", stringsAsFactors = FALSE)
df_allstar = read.csv("AllStar_2018.csv", stringsAsFactors = FALSE)
df_olympics2016 = read.csv("Olympics_2016.csv", stringsAsFactors = FALSE)
df_olympics2020 = read.csv("Olympics_2020_Finalists.csv", stringsAsFactors = FALSE)
df_olympics2016
df_merge <- df %>%
left_join(df_olympics2016[c("Player", "Olympics2016")])
df_merge <- df %>%
left_join(df_olympics2016[c("Player", "Olympics2016")], by = Player)
df_merge <- df %>%
left_join(df_olympics2016[c("Player", "Olympics2016")], by = "Player")
df_olympics2020
df_merge <- df %>%
left_join(df_olympics2016[c("Player", "Olympics2016")], by = "Player") %>%
left_join(df_olympics2020[c("Player", "Olympics.Finalist")], by = "Player")
df_allstar
df_allstar = read.csv("AllStar_2018.csv", stringsAsFactors = FALSE) %>%
mutate(AllStar = 1) %>%
select(Player, AllStar)
df_olympics2016 = read.csv("Olympics_2016.csv", stringsAsFactors = FALSE) %>%
select(Player, Olympics2016)
df_olympics2020 = read.csv("Olympics_2020_Finalists.csv", stringsAsFactors = FALSE) %>%
select(Player, Olympics.Finalist)
df_merge <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player")
df_merge
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0))
df_clean
unique(df_clean$Player)
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0))
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players))
df_playoffs = read.csv("Playoffs_2017_2019.csv", stringsAsFactors = FALSE)
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players))
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter(!(Player %in% intl_players))
df_playoffs
unique(df_playoffs_clean$Player)
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter(G > 3)
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter(G > 5)
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter(G > 4)
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter(G >= 4)
table(df_clean$AllStar, df_clean$Olympics.Finalist)
table(df_clean$AllStar, df_clean$Olympics.Finalist, exclude = NULL)
names(df_clean)
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players)) %>%
select(-c("Username","Tm"))
df_clean
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players))
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar)
write.csv(df_clean, "../NBA_data_2018_2019.csv")
write.csv(df_clean, "../NBA_data_playoffs_2017_2019.csv")
write.csv(df_clean, "../NBA_data_2018_2019.csv", row.names = FALSE)
write.csv(df_clean, "../NBA_data_playoffs_2017_2019.csv", row.names = FALSE)
df_olympics2020 = read.csv("Olympics_2020_Finalists.csv", stringsAsFactors = FALSE) %>%
mutate(OlympicsFinalist = Olympics.Finalist) %>%
select(Player, OlympicsFinalist)
intl_players <- unique(df_intl$Player)
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players))
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + Olympics.Finalist + AllStar)
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players))
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar)
write.csv(df_clean, "../NBA_data_2018_2019.csv", row.names = FALSE)
write.csv(df_clean, "../NBA_data_playoffs_2017_2019.csv", row.names = FALSE)
names(df_clean)
table(df_clean$Pos)
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
left_join(df_clean[[c("Player","Pos")]], by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar)
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
left_join(df_clean[c("Player","Pos")], by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar)
write.csv(df_clean, "../NBA_data_2018_2019.csv", row.names = FALSE)
write.csv(df_playoffs_clean, "../NBA_data_playoffs_2017_2019.csv", row.names = FALSE)
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players)) %>%
replace_na(0)
?left_join
df_clean[is.na(df_clean)] <- 0
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
left_join(df_clean[c("Player","Pos")], by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar)
df_playoffs_clean[is.na(df_playoffs_clean)] <- 0
write.csv(df_clean, "../NBA_data_2018_2019.csv", row.names = FALSE)
write.csv(df_playoffs_clean, "../NBA_data_playoffs_2017_2019.csv", row.names = FALSE)
ggplot(aes(x=df_clean$DBPM)) + geom_hist()
ggplot(df_clean, aes(x=DBPM)) + geom_hist()
library(tidyverse)
ggplot(df_clean, aes(x=DBPM)) + geom_hist()
ggplot(df_clean, aes(x=DBPM)) + geom_histogram()
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players)) %>%
rename(WS_48 = WS.48)
df_clean[is.na(df_clean)] <- 0
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
left_join(df_clean[c("Player","Pos")], by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar) %>%
rename(WS_48 = WS.48)
df_playoffs_clean[is.na(df_playoffs_clean)] <- 0
write.csv(df_clean, "../NBA_data_2018_2019.csv", row.names = FALSE)
write.csv(df_playoffs_clean, "../NBA_data_playoffs_2017_2019.csv", row.names = FALSE)
df_clean
View(df_clean)
df
df_clean
View(df_clean)
intl_players
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar)
View(df_clean)
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
mutate(HighRated = coalesce(0,Olympics2016) + coalesce(0,OlympicsFinalist) + coalesce(0,AllStar)) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players)) %>%
rename(WS_48 = WS.48)
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
replace_na(Olympics2016 = 0,
OlympicsFinalist = 0,
AllStar = 0) %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players)) %>%
rename(WS_48 = WS.48)
View(df_clean)
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
replace_na(Olympics2016 = 0,
OlympicsFinalist = 0,
AllStar = 0)
## Filter to all players who have played at least 60 games OR are "HighRated"
## High rated = either on the 2016 Olympics team, 2018-2019 AllStar, or 2020 Tokyo Finalist
df_clean <- df %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
replace_na(list(Olympics2016 = 0,
OlympicsFinalist = 0,
AllStar = 0)) %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar) %>%
filter((G >= 60) | (HighRated > 0)) %>% ## down to 239 players
filter(!(Player %in% intl_players)) %>%
rename(WS_48 = WS.48)
View(df_clean)
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
left_join(df_clean[c("Player","Pos")], by = "Player") %>%
replace_na(list(Olympics2016 = 0,
OlympicsFinalist = 0,
AllStar = 0)) %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar) %>%
rename(WS_48 = WS.48)
df_playoffs_clean[is.na(df_playoffs_clean)] <- 0
write.csv(df_clean, "../NBA_data_2018_2019.csv", row.names = FALSE)
write.csv(df_playoffs_clean, "../NBA_data_playoffs_2017_2019.csv", row.names = FALSE)
df_playoffs_clean
df_playoffs_clean$Player
unique(df_playoffs_clean$Player)
unique(df_playoffs$Player)
(df_playoffs$Player)
position_dictionary <- df_clean[c("Player","Pos")]
position_dictionary <- df_clean[c("Player","Pos")] %>% sort()
position_dictionary <- df_clean[c("Player","Pos")] %>% arrange()
View(position_dictionary)
position_dictionary <- df_clean[c("Player","Pos")] %>% group_by(Player) %>% summarize(first(Pos))
df_clean[c("Player","Pos")]
position_dictionary <- df_clean[c("Player","Pos")] %>% group_by(Player) %>% summarize(first(Pos))
## US Playoffs appearances
df_playoffs_clean <- df_playoffs %>%
left_join(df_olympics2016, by = "Player") %>%
left_join(df_olympics2020, by = "Player") %>%
left_join(df_allstar, by = "Player") %>%
left_join(df_clean[c("Player","Pos")], by = "Player") %>%
replace_na(list(Olympics2016 = 0,
OlympicsFinalist = 0,
AllStar = 0)) %>%
mutate(HighRated = Olympics2016 + OlympicsFinalist + AllStar) %>%
rename(WS_48 = WS.48)
unique(df_playoffs$Player)
(df_playoffs$Player)
write.csv(df_clean, "../NBA_data_2018_2019.csv", row.names = FALSE)
write.csv(df_playoffs_clean, "../NBA_data_playoffs_2017_2019.csv", row.names = FALSE)
